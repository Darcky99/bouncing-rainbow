using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEditor.Callbacks;
using UnityEditor.iOS.Xcode;
using UnityEngine;

#if UNITY_IOS || UNITY_IPHONE

// UTUD stands for User Tracking Usage Description
public class UTUDLocalizationPostProcessor
{
    [PostProcessBuildAttribute(int.MaxValue-1)]
    public static void MaxPostProcessPbxProject(BuildTarget buildTarget, string buildPath)
    {
        var projectPath = PBXProject.GetPBXProjectPath(buildPath);
        var project = new PBXProject();
        project.ReadFromFile(projectPath);

#if UNITY_2019_3_OR_NEWER
        var unityMainTargetGuid = project.GetUnityMainTargetGuid();
        var unityFrameworkTargetGuid = project.GetUnityFrameworkTargetGuid();
#else
            var unityMainTargetGuid = project.TargetGuidByName(UnityMainTargetName);
            var unityFrameworkTargetGuid = project.TargetGuidByName(UnityMainTargetName);
#endif
        UTUDLocalizationSettings localizationAsset = Resources.Load<UTUDLocalizationSettings>("UTUDLocalizationSettings");
        if (localizationAsset != null)
            foreach (var localizationElement in localizationAsset.Localization)
            {
                LocalizeUserTrackingDescriptionIfNeeded(localizationAsset, localizationElement.LocalizedText, localizationElement.Code, buildPath, project, unityMainTargetGuid);
            }

        project.WriteToFile(projectPath);
    }

    private static void LocalizeUserTrackingDescriptionIfNeeded(UTUDLocalizationSettings settings, string localizedUserTrackingDescription, string localeCode, string buildPath, PBXProject project, string targetGuid)
    {
        const string resourcesDirectoryName = "Resources";
        var resourcesDirectoryPath = Path.Combine(buildPath, resourcesDirectoryName);
        var localeSpecificDirectoryName = localeCode + ".lproj";
        var localeSpecificDirectoryPath = Path.Combine(resourcesDirectoryPath, localeSpecificDirectoryName);
        var infoPlistStringsFilePath = Path.Combine(localeSpecificDirectoryPath, "InfoPlist.strings");

        // Check if localization has been disabled between builds, and remove them as needed.
        if (!settings.UseCustomLocalization || string.IsNullOrEmpty(localizedUserTrackingDescription))
        {
            return;
        }

        // Create intermediate directories as needed.
        if (!Directory.Exists(resourcesDirectoryPath))
        {
            Directory.CreateDirectory(resourcesDirectoryPath);
        }

        if (!Directory.Exists(localeSpecificDirectoryPath))
        {
            Directory.CreateDirectory(localeSpecificDirectoryPath);
        }

        var localizedDescriptionLine = "\"NSUserTrackingUsageDescription\" = \"" + localizedUserTrackingDescription + "\";\n";
        // File already exists, update it in case the value changed between builds.
        if (File.Exists(infoPlistStringsFilePath))
        {
            var output = new List<string>();
            var lines = File.ReadAllLines(infoPlistStringsFilePath);
            var keyUpdated = false;
            foreach (var line in lines)
            {
                if (line.Contains("NSUserTrackingUsageDescription"))
                {
                    output.Add(localizedDescriptionLine);
                    keyUpdated = true;
                }
                else
                {
                    output.Add(line);
                }
            }

            if (!keyUpdated)
            {
                output.Add(localizedDescriptionLine);
            }

            File.WriteAllText(infoPlistStringsFilePath, string.Join("\n", output.ToArray()) + "\n");
        }
        // File doesn't exist, create one.s
        else
        {
            File.WriteAllText(infoPlistStringsFilePath, "/* Localized versions of Info.plist keys - Generated by AL MAX plugin */\n" + localizedDescriptionLine);
        }

        var guid = project.AddFolderReference(localeSpecificDirectoryPath, Path.Combine(resourcesDirectoryName, localeSpecificDirectoryName));
        project.AddFileToBuild(targetGuid, guid);
    }
}

#endif